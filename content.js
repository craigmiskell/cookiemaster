/*
  Copyright 2017 Craig Miskell

  This file is part of CookieMaster, a Firefox Web Extension
  CookieMaster is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  CookieMaster is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
A content script injected into *every* page, that hooks document.cookie
so that we can detect a cookie being set by javascript more accurately
than just receiving the cookies.onChanged notification (with no tab/frame info)

It's a bit funky, in that we have to use window.eval to run the hook code in
the context of the *page* (the content-script context is sandboxed from that) so
as to be able to hook the cookies property in the first place

Then we can't just call browser.runtime (not available in the page context) so
we send a custom 'scriptedCookieSet' event from the page to a listener in the
content-script context (which does have access to browser.runtime).
From there, we can check the response and then either actually set, or ignore/drop,
the cookie (directly, from the content-script context; see comments there for details of how)
*/
window.addEventListener("scriptedCookieSet", async function(e) {
  // Note that some of the information we need (tabId + frameId) is
  // generated by browser.runtime (we can"t see it here), and is critical
  var response = await browser.runtime.sendMessage({
     "name": "scriptedCookieSet",
     "value": e.detail,
  });
  if(response) {
    // console.log("Going to invoke the original cookie set"+ e.detail)

    // This relies on https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Xray_vision
    // where this event handler is in the *content-script* context and thus
    // gets a 'clean' view of the document, and thus doesn't see the overridden
    // cookie property setter that we create in the *window* context (via `eval`)
    // Side note: this x-ray vision thing is both good (security), and annoying
    // (requires shenanigans), *except* in this case when it's really helpful
    // because otherwise we'd have to send events back to the window context,
    // which is actually painful, and has security-risk implications (passing
    // objects,trusting the messages, etc)
    document.cookie = e.detail;
  }
});

// Many thanks to @gregers on https://stackoverflow.com/questions/32410331/proxying-of-document-cookie
// for inspiration.
window.eval(`
  var cookiePropertyDescriptor = Object.getOwnPropertyDescriptor(Document.prototype, "cookie");
  Object.defineProperty(Document.prototype, "cookie", {
    get: cookiePropertyDescriptor.get,
    set: function(value) {
      var event = new CustomEvent("scriptedCookieSet",
        {
          detail: value
        }
      );
      window.dispatchEvent(event);
    }
  });
`);
